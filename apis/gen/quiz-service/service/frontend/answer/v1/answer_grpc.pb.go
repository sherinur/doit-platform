// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: quiz-service/service/frontend/answer/v1/answer.proto

package answersvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnswerService_CreateAnswer_FullMethodName           = "/quiz.service.frontend.answer.v1.AnswerService/CreateAnswer"
	AnswerService_CreateAnswers_FullMethodName          = "/quiz.service.frontend.answer.v1.AnswerService/CreateAnswers"
	AnswerService_GetAnswerById_FullMethodName          = "/quiz.service.frontend.answer.v1.AnswerService/GetAnswerById"
	AnswerService_GetAnswersByQuestionId_FullMethodName = "/quiz.service.frontend.answer.v1.AnswerService/GetAnswersByQuestionId"
	AnswerService_UpdateAnswer_FullMethodName           = "/quiz.service.frontend.answer.v1.AnswerService/UpdateAnswer"
	AnswerService_DeleteAnswer_FullMethodName           = "/quiz.service.frontend.answer.v1.AnswerService/DeleteAnswer"
)

// AnswerServiceClient is the client API for AnswerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnswerServiceClient interface {
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*CreateAnswerResponse, error)
	CreateAnswers(ctx context.Context, in *CreateAnswerRequests, opts ...grpc.CallOption) (*CreateAnswerResponses, error)
	GetAnswerById(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponse, error)
	GetAnswersByQuestionId(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponses, error)
	UpdateAnswer(ctx context.Context, in *UpdateAnswerRequest, opts ...grpc.CallOption) (*UpdateAnswerResponse, error)
	DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerResponse, error)
}

type answerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswerServiceClient(cc grpc.ClientConnInterface) AnswerServiceClient {
	return &answerServiceClient{cc}
}

func (c *answerServiceClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*CreateAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnswerResponse)
	err := c.cc.Invoke(ctx, AnswerService_CreateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) CreateAnswers(ctx context.Context, in *CreateAnswerRequests, opts ...grpc.CallOption) (*CreateAnswerResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnswerResponses)
	err := c.cc.Invoke(ctx, AnswerService_CreateAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) GetAnswerById(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnswerResponse)
	err := c.cc.Invoke(ctx, AnswerService_GetAnswerById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) GetAnswersByQuestionId(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*GetAnswerResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnswerResponses)
	err := c.cc.Invoke(ctx, AnswerService_GetAnswersByQuestionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) UpdateAnswer(ctx context.Context, in *UpdateAnswerRequest, opts ...grpc.CallOption) (*UpdateAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnswerResponse)
	err := c.cc.Invoke(ctx, AnswerService_UpdateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *answerServiceClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*DeleteAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAnswerResponse)
	err := c.cc.Invoke(ctx, AnswerService_DeleteAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerServiceServer is the server API for AnswerService service.
// All implementations must embed UnimplementedAnswerServiceServer
// for forward compatibility.
type AnswerServiceServer interface {
	CreateAnswer(context.Context, *CreateAnswerRequest) (*CreateAnswerResponse, error)
	CreateAnswers(context.Context, *CreateAnswerRequests) (*CreateAnswerResponses, error)
	GetAnswerById(context.Context, *GetAnswerRequest) (*GetAnswerResponse, error)
	GetAnswersByQuestionId(context.Context, *GetAnswerRequest) (*GetAnswerResponses, error)
	UpdateAnswer(context.Context, *UpdateAnswerRequest) (*UpdateAnswerResponse, error)
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error)
	mustEmbedUnimplementedAnswerServiceServer()
}

// UnimplementedAnswerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnswerServiceServer struct{}

func (UnimplementedAnswerServiceServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*CreateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedAnswerServiceServer) CreateAnswers(context.Context, *CreateAnswerRequests) (*CreateAnswerResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswers not implemented")
}
func (UnimplementedAnswerServiceServer) GetAnswerById(context.Context, *GetAnswerRequest) (*GetAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerById not implemented")
}
func (UnimplementedAnswerServiceServer) GetAnswersByQuestionId(context.Context, *GetAnswerRequest) (*GetAnswerResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswersByQuestionId not implemented")
}
func (UnimplementedAnswerServiceServer) UpdateAnswer(context.Context, *UpdateAnswerRequest) (*UpdateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnswer not implemented")
}
func (UnimplementedAnswerServiceServer) DeleteAnswer(context.Context, *DeleteAnswerRequest) (*DeleteAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedAnswerServiceServer) mustEmbedUnimplementedAnswerServiceServer() {}
func (UnimplementedAnswerServiceServer) testEmbeddedByValue()                       {}

// UnsafeAnswerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnswerServiceServer will
// result in compilation errors.
type UnsafeAnswerServiceServer interface {
	mustEmbedUnimplementedAnswerServiceServer()
}

func RegisterAnswerServiceServer(s grpc.ServiceRegistrar, srv AnswerServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnswerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnswerService_ServiceDesc, srv)
}

func _AnswerService_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_CreateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_CreateAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).CreateAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_CreateAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).CreateAnswers(ctx, req.(*CreateAnswerRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_GetAnswerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).GetAnswerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_GetAnswerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).GetAnswerById(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_GetAnswersByQuestionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).GetAnswersByQuestionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_GetAnswersByQuestionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).GetAnswersByQuestionId(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_UpdateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).UpdateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_UpdateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).UpdateAnswer(ctx, req.(*UpdateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnswerService_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnswerService_DeleteAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnswerService_ServiceDesc is the grpc.ServiceDesc for AnswerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnswerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.service.frontend.answer.v1.AnswerService",
	HandlerType: (*AnswerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnswer",
			Handler:    _AnswerService_CreateAnswer_Handler,
		},
		{
			MethodName: "CreateAnswers",
			Handler:    _AnswerService_CreateAnswers_Handler,
		},
		{
			MethodName: "GetAnswerById",
			Handler:    _AnswerService_GetAnswerById_Handler,
		},
		{
			MethodName: "GetAnswersByQuestionId",
			Handler:    _AnswerService_GetAnswersByQuestionId_Handler,
		},
		{
			MethodName: "UpdateAnswer",
			Handler:    _AnswerService_UpdateAnswer_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _AnswerService_DeleteAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz-service/service/frontend/answer/v1/answer.proto",
}
