// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: quiz-service/service/frontend/result/v1/result.proto

package ressvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResultService_CreateResult_FullMethodName       = "/quiz.service.frontend.result.v1.ResultService/CreateResult"
	ResultService_GetResultById_FullMethodName      = "/quiz.service.frontend.result.v1.ResultService/GetResultById"
	ResultService_GetResultsByQuizId_FullMethodName = "/quiz.service.frontend.result.v1.ResultService/GetResultsByQuizId"
	ResultService_GetResultsByUserId_FullMethodName = "/quiz.service.frontend.result.v1.ResultService/GetResultsByUserId"
	ResultService_DeleteResult_FullMethodName       = "/quiz.service.frontend.result.v1.ResultService/DeleteResult"
)

// ResultServiceClient is the client API for ResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultServiceClient interface {
	CreateResult(ctx context.Context, in *CreateResultRequest, opts ...grpc.CallOption) (*CreateResultResponse, error)
	GetResultById(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
	GetResultsByQuizId(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponses, error)
	GetResultsByUserId(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponses, error)
	DeleteResult(ctx context.Context, in *DeleteResultRequest, opts ...grpc.CallOption) (*DeleteResultResponse, error)
}

type resultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultServiceClient(cc grpc.ClientConnInterface) ResultServiceClient {
	return &resultServiceClient{cc}
}

func (c *resultServiceClient) CreateResult(ctx context.Context, in *CreateResultRequest, opts ...grpc.CallOption) (*CreateResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResultResponse)
	err := c.cc.Invoke(ctx, ResultService_CreateResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetResultById(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, ResultService_GetResultById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetResultsByQuizId(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponses)
	err := c.cc.Invoke(ctx, ResultService_GetResultsByQuizId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetResultsByUserId(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponses)
	err := c.cc.Invoke(ctx, ResultService_GetResultsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) DeleteResult(ctx context.Context, in *DeleteResultRequest, opts ...grpc.CallOption) (*DeleteResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResultResponse)
	err := c.cc.Invoke(ctx, ResultService_DeleteResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultServiceServer is the server API for ResultService service.
// All implementations must embed UnimplementedResultServiceServer
// for forward compatibility.
type ResultServiceServer interface {
	CreateResult(context.Context, *CreateResultRequest) (*CreateResultResponse, error)
	GetResultById(context.Context, *GetResultRequest) (*GetResultResponse, error)
	GetResultsByQuizId(context.Context, *GetResultRequest) (*GetResultResponses, error)
	GetResultsByUserId(context.Context, *GetResultRequest) (*GetResultResponses, error)
	DeleteResult(context.Context, *DeleteResultRequest) (*DeleteResultResponse, error)
	mustEmbedUnimplementedResultServiceServer()
}

// UnimplementedResultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResultServiceServer struct{}

func (UnimplementedResultServiceServer) CreateResult(context.Context, *CreateResultRequest) (*CreateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResult not implemented")
}
func (UnimplementedResultServiceServer) GetResultById(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultById not implemented")
}
func (UnimplementedResultServiceServer) GetResultsByQuizId(context.Context, *GetResultRequest) (*GetResultResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultsByQuizId not implemented")
}
func (UnimplementedResultServiceServer) GetResultsByUserId(context.Context, *GetResultRequest) (*GetResultResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultsByUserId not implemented")
}
func (UnimplementedResultServiceServer) DeleteResult(context.Context, *DeleteResultRequest) (*DeleteResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResult not implemented")
}
func (UnimplementedResultServiceServer) mustEmbedUnimplementedResultServiceServer() {}
func (UnimplementedResultServiceServer) testEmbeddedByValue()                       {}

// UnsafeResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultServiceServer will
// result in compilation errors.
type UnsafeResultServiceServer interface {
	mustEmbedUnimplementedResultServiceServer()
}

func RegisterResultServiceServer(s grpc.ServiceRegistrar, srv ResultServiceServer) {
	// If the following call pancis, it indicates UnimplementedResultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResultService_ServiceDesc, srv)
}

func _ResultService_CreateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).CreateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_CreateResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).CreateResult(ctx, req.(*CreateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetResultById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetResultById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_GetResultById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetResultById(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetResultsByQuizId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetResultsByQuizId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_GetResultsByQuizId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetResultsByQuizId(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetResultsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetResultsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_GetResultsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetResultsByUserId(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_DeleteResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).DeleteResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_DeleteResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).DeleteResult(ctx, req.(*DeleteResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResultService_ServiceDesc is the grpc.ServiceDesc for ResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.service.frontend.result.v1.ResultService",
	HandlerType: (*ResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResult",
			Handler:    _ResultService_CreateResult_Handler,
		},
		{
			MethodName: "GetResultById",
			Handler:    _ResultService_GetResultById_Handler,
		},
		{
			MethodName: "GetResultsByQuizId",
			Handler:    _ResultService_GetResultsByQuizId_Handler,
		},
		{
			MethodName: "GetResultsByUserId",
			Handler:    _ResultService_GetResultsByUserId_Handler,
		},
		{
			MethodName: "DeleteResult",
			Handler:    _ResultService_DeleteResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz-service/service/frontend/result/v1/result.proto",
}
